策略模式：
	定义算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。

观察者模式：
	在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知，并自动更新。	

装饰者模式：
	动态将对象职责附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择。

工厂方法模式：
	定义一个创建对象的接口，但由子类决定要实例化的类是哪个。工厂方法让类把实例化推迟到子类。

单例模式：
	确保一个类只有一个实例，并提供全局访问点。

命令模式：
	将请求封装成对象，这可以让你使用不同的请求、队列，或者日志请求来参数化其他对象。命令模式也可以支持撤销。
	
适配器模式:
	适配器模式的工作是将一个接口转换另一个。将一个类的接口，转换成客户期望的另一个接口。适配器让原来接口不兼容的类可以合作无间。
	
外观模式：
	提供一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。

模板方法模式：
	在一个方法中定义一个算法的骨架，而将一些步骤延迟到之类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。
模板就是一个方法，更具体的说，这个方法将算法定义成一组步骤，其中的任何步骤都可以是抽象的，由子类负责实现。

迭代器模式：
	提供一种顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。

状态模式：
	允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。
	将可以互换的行为封装起来，然后使用委托的方法，决定使用哪一个行为
	
	
OO设计原则：
	封装变化
	多用组合，少用继承
	针对接口编程，不针对实现编程
	为交互对象之间的松耦设计而努力
	类应该对扩展开放，对修改关闭。
	依赖抽象，不要依赖具体类。
	只和朋友交谈
	别找我，我会找你
	类应该只有一个改变的理由。
	
	
要点:
	在我们的设计中，应该允许可以被扩展，而无须修改现有的代码。
	组合和委托可用于在运行时动态地加上新的行为。


依赖倒置原则：
	1.该层次的模块不应该依赖于低层次的模块，他们应该都依赖于抽象。
	2.抽象不应该依赖于具体实现，具体实现应该依赖于抽象。

BO(Business Object)业务对象
Biz(Business Logic)业务逻辑

单一职责原则：应该有且仅有一个原因引起类的变更。

组合模式：允许你将对象组合成树形结构来表现”整体/部分“层次结构。组合能让客户以一致的方式处理个别对象以及对象组合。通常是用树形结构，也就是
一种层次结构。根就是顶层的组合，然后往下是它的孩子，最末端是叶子节点。