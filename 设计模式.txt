策略模式：
	定义算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。

观察者模式：
	在对象之间定义一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知，并自动更新。	

装饰者模式：
	动态将对象职责附加到对象上。想要扩展功能，装饰者提供有别于继承的另一种选择。

工厂方法模式：
	定义一个创建对象的接口，但由子类决定要实例化的类是哪个。工厂方法让类把实例化推迟到子类。

单例模式：
	确保一个类只有一个实例，并提供全局访问点。

命令模式：
	将请求封装成对象，这可以让你使用不同的请求、队列，或者日志请求来参数化其他对象。命令模式也可以支持撤销。
	
	
	

OO设计原则：
	封装变化
	多用组合，少用继承
	针对接口编程，不针对实现编程
	为交互对象之间的松耦设计而努力
	类应该对扩展开放，对修改关闭。
	依赖抽象，不要依赖具体类。

要点:
	在我们的设计中，应该允许可以被扩展，而无须修改现有的代码。
	组合和委托可用于在运行时动态地加上新的行为。


依赖倒置原则：
	1.该层次的模块不应该依赖于低层次的模块，他们应该都依赖于抽象。
	2.抽象不应该依赖于具体实现，具体实现应该依赖于抽象。

BO(Business Object)业务对象
Biz(Business Logic)业务逻辑

单一职责原则：应该有且仅有一个原因引起类的变更。



哟	